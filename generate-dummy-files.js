/**
 * HQMX Converter - ÎçîÎØ∏ ÌååÏùº ÏÉùÏÑ± Î∞è ÌååÏùº ÏÉÅÌÉú Ï≤¥ÌÅ¨
 *
 * Í∏∞Îä•:
 * - ÌÖåÏä§Ìä∏Ïóê ÌïÑÏöîÌïú ÌååÏùº Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
 * - Í∞ÑÎã®Ìïú ÎçîÎØ∏ ÌååÏùº ÏÉùÏÑ± (ÌÖçÏä§Ìä∏ Í∏∞Î∞ò)
 * - ÎàÑÎùΩÎêú ÌååÏùº Î¶¨Ìè¨Ìä∏
 *
 * ÏÇ¨Ïö©Î≤ï:
 *   node generate-dummy-files.js          # ÌååÏùº ÏÉÅÌÉú Ï≤¥ÌÅ¨
 *   node generate-dummy-files.js --create # ÎçîÎØ∏ ÌååÏùº ÏÉùÏÑ±
 */

const fs = require('fs');
const path = require('path');

const TEST_FILES_DIR = './conv-test';

// ÌååÏùº Îß§Ìïë (test-comprehensive.jsÏôÄ ÎèôÏùº)
const FILE_MAP = {
  // Ïù¥ÎØ∏ÏßÄ
  jpg: 'test.jpg',
  jpeg: 'test.jpg',
  png: 'test.png',
  webp: 'test.webp',
  heic: 'test.heic',
  gif: 'test.gif',
  svg: 'test.svg',
  bmp: 'test.bmp',
  ico: 'test.ico',
  avif: 'test.avif',
  // Î¨∏ÏÑú
  pdf: 'test.pdf',
  docx: 'test.docx',
  doc: 'test.doc',
  xlsx: 'test.xlsx',
  xls: 'test.xls',
  pptx: 'test.pptx',
  ppt: 'test.ppt',
  txt: 'test.txt',
  // ÎπÑÎîîÏò§
  mp4: 'test.mp4',
  mov: 'test.mov',
  mkv: 'test.mkv',
  flv: 'test.flv',
  wmv: 'test.wmv',
  webm: 'test.webm',
  avi: 'test.avi',
  m4v: 'test.m4v',
  // Ïò§ÎîîÏò§
  mp3: 'test.mp3',
  m4a: 'test.m4a',
  flac: 'test.flac',
  ogg: 'test.ogg',
  aac: 'test.aac',
  wma: 'test.wma',
  wav: 'test.wav',
  opus: 'test.opus',
};

// ÎçîÎØ∏ ÌååÏùº ÏÉùÏÑ± ÌÖúÌîåÎ¶ø
const DUMMY_TEMPLATES = {
  txt: () => `HQMX Converter Test File
Generated: ${new Date().toISOString()}
Type: Plain Text
Purpose: Testing text file conversion

Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Test content for file conversion testing.`,

  csv: () => `Name,Age,City
Alice,25,Seoul
Bob,30,Busan
Charlie,35,Incheon`,

  json: () => JSON.stringify({
    test: true,
    timestamp: new Date().toISOString(),
    purpose: 'HQMX Converter Test File',
    data: [1, 2, 3, 4, 5],
  }, null, 2),

  xml: () => `<?xml version="1.0" encoding="UTF-8"?>
<test>
  <timestamp>${new Date().toISOString()}</timestamp>
  <purpose>HQMX Converter Test File</purpose>
  <data>
    <item>1</item>
    <item>2</item>
    <item>3</item>
  </data>
</test>`,

  html: () => `<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>HQMX Converter Test</title>
</head>
<body>
  <h1>Test File</h1>
  <p>Generated: ${new Date().toISOString()}</p>
  <p>Purpose: Testing HTML file conversion</p>
</body>
</html>`,

  md: () => `# HQMX Converter Test File

**Generated**: ${new Date().toISOString()}
**Purpose**: Testing Markdown file conversion

## Test Content

- Item 1
- Item 2
- Item 3

### Code Block

\`\`\`javascript
console.log('Hello, HQMX Converter!');
\`\`\`
`,

  svg: () => `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewBox="0 0 200 200">
  <rect width="200" height="200" fill="#f0f0f0"/>
  <circle cx="100" cy="100" r="50" fill="#3498db"/>
  <text x="100" y="110" font-family="Arial" font-size="16" fill="white" text-anchor="middle">TEST</text>
</svg>`,
};

// CLI ÏòµÏÖò
const args = process.argv.slice(2);
const shouldCreate = args.includes('--create');

async function main() {
  console.log('\n' + '='.repeat(70));
  console.log('üìÅ HQMX Converter - ÌååÏùº ÏÉÅÌÉú Ï≤¥ÌÅ¨');
  console.log('='.repeat(70) + '\n');

  // ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
  if (!fs.existsSync(TEST_FILES_DIR)) {
    console.log(`‚ö†Ô∏è  ÌÖåÏä§Ìä∏ ÌååÏùº ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§: ${TEST_FILES_DIR}`);
    console.log(`   ÎîîÎ†âÌÜ†Î¶¨Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§...\n`);
    fs.mkdirSync(TEST_FILES_DIR, { recursive: true });
  }

  // ÌååÏùº ÏÉÅÌÉú Ï≤¥ÌÅ¨
  const fileStatus = checkFileStatus();

  // Î¶¨Ìè¨Ìä∏ Ï∂úÎ†•
  printReport(fileStatus);

  // ÎçîÎØ∏ ÌååÏùº ÏÉùÏÑ±
  if (shouldCreate) {
    console.log('\n' + '‚îÄ'.repeat(70));
    console.log('üõ†Ô∏è  ÎçîÎØ∏ ÌååÏùº ÏÉùÏÑ± ÏãúÏûë\n');
    await createDummyFiles(fileStatus);
  } else {
    console.log('\nüí° ÌåÅ: ÎçîÎØ∏ ÌååÏùºÏùÑ ÏÉùÏÑ±ÌïòÎ†§Î©¥ --create ÏòµÏÖòÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî:');
    console.log('   node generate-dummy-files.js --create\n');
  }
}

function checkFileStatus() {
  const status = {
    total: 0,
    exists: 0,
    missing: 0,
    skipped: 0,
    details: {},
  };

  Object.entries(FILE_MAP).forEach(([format, filename]) => {
    status.total++;

    if (!filename) {
      status.skipped++;
      status.details[format] = { status: 'skip', reason: 'ÏùòÎèÑÏ†Å Ïä§ÌÇµ (ÌäπÏàò Ìè¨Îß∑)' };
      return;
    }

    const filePath = path.join(TEST_FILES_DIR, filename);
    const exists = fs.existsSync(filePath);

    if (exists) {
      const stats = fs.statSync(filePath);
      const sizeKB = (stats.size / 1024).toFixed(2);
      status.exists++;
      status.details[format] = {
        status: 'exists',
        filename,
        path: filePath,
        size: `${sizeKB} KB`,
      };
    } else {
      status.missing++;
      status.details[format] = {
        status: 'missing',
        filename,
        path: filePath,
      };
    }
  });

  return status;
}

function printReport(status) {
  console.log('üìä ÌååÏùº ÏÉÅÌÉú ÏöîÏïΩ\n');
  console.log(`  Ï¥ù ÌòïÏãù:     ${status.total}Í∞ú`);
  console.log(`  ‚úÖ Ï°¥Ïû¨:     ${status.exists}Í∞ú`);
  console.log(`  ‚ùå ÎàÑÎùΩ:     ${status.missing}Í∞ú`);
  console.log(`  ‚è≠Ô∏è  Ïä§ÌÇµ:     ${status.skipped}Í∞ú\n`);

  if (status.exists > 0) {
    console.log('‚úÖ Ï°¥Ïû¨ÌïòÎäî ÌååÏùº:\n');
    Object.entries(status.details)
      .filter(([_, info]) => info.status === 'exists')
      .forEach(([format, info]) => {
        console.log(`  ${format.padEnd(10)} ‚Üí ${info.filename.padEnd(40)} (${info.size})`);
      });
    console.log();
  }

  if (status.missing > 0) {
    console.log('‚ùå ÎàÑÎùΩÎêú ÌååÏùº:\n');
    Object.entries(status.details)
      .filter(([_, info]) => info.status === 'missing')
      .forEach(([format, info]) => {
        const canCreate = DUMMY_TEMPLATES[format] ? '‚úÖ ÏÉùÏÑ± Í∞ÄÎä•' : '‚ö†Ô∏è  ÏàòÎèô ÌïÑÏöî';
        console.log(`  ${format.padEnd(10)} ‚Üí ${info.filename.padEnd(40)} ${canCreate}`);
      });
    console.log();
  }

  if (status.skipped > 0) {
    console.log('‚è≠Ô∏è  Ïä§ÌÇµÎêú ÌååÏùº:\n');
    Object.entries(status.details)
      .filter(([_, info]) => info.status === 'skip')
      .forEach(([format, info]) => {
        console.log(`  ${format.padEnd(10)} ‚Üí ${info.reason}`);
      });
    console.log();
  }
}

async function createDummyFiles(status) {
  const missingFiles = Object.entries(status.details)
    .filter(([_, info]) => info.status === 'missing');

  if (missingFiles.length === 0) {
    console.log('  ‚úÖ Î™®Îì† ÌïÑÏöîÌïú ÌååÏùºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§!\n');
    return;
  }

  let created = 0;
  let skipped = 0;

  for (const [format, info] of missingFiles) {
    const template = DUMMY_TEMPLATES[format];

    if (!template) {
      console.log(`  ‚è≠Ô∏è  ${format}: ÎçîÎØ∏ ÏÉùÏÑ± Î∂àÍ∞Ä (ÏàòÎèôÏúºÎ°ú ÌååÏùº Ï§ÄÎπÑ ÌïÑÏöî)`);
      skipped++;
      continue;
    }

    try {
      const content = template();
      fs.writeFileSync(info.path, content, 'utf-8');
      const sizeKB = (Buffer.byteLength(content, 'utf-8') / 1024).toFixed(2);
      console.log(`  ‚úÖ ${format}: ${info.filename} ÏÉùÏÑ± (${sizeKB} KB)`);
      created++;
    } catch (error) {
      console.log(`  ‚ùå ${format}: ÏÉùÏÑ± Ïã§Ìå® - ${error.message}`);
      skipped++;
    }
  }

  console.log('\n' + '‚îÄ'.repeat(70));
  console.log(`‚úÖ ${created}Í∞ú ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å`);
  if (skipped > 0) {
    console.log(`‚è≠Ô∏è  ${skipped}Í∞ú ÌååÏùº Ïä§ÌÇµ (ÏàòÎèô Ï§ÄÎπÑ ÌïÑÏöî)`);
  }
  console.log('');
}

// Ïã§Ìñâ
main().catch(error => {
  console.error('\n‚ùå Ïò§Î•ò:', error);
  process.exit(1);
});
